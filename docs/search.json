[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NOAA Fisheries GitHub Clinic",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#aims-and-objectives-of-the-github-clinic",
    "href": "index.html#aims-and-objectives-of-the-github-clinic",
    "title": "NOAA Fisheries GitHub Clinic",
    "section": "Aims and Objectives of the GitHub Clinic",
    "text": "Aims and Objectives of the GitHub Clinic\nThe GitHub Clinic will consist of several components:\n\nAn introductory 2-hour introduction to Git and GitHub virtual workshop, repeated twice weekly for three weeks. These sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with the knowledge required for basic repository management using Git commands, collaboration, and project management\nA series of 1-hour standalone skills workshops for deeper dives into several GitHub features including advanced branch management, Git workflows, GitHub pages, and forking\nOpen Science Office Hours for individual help and coaching\n\n\nSchedule\nSee the schedule page.\n\nIntro workshops will be given Mondays at 10am PT/1pm ET and Tuesdays at 1pm PT/4pm ET for 3 weeks starting April 7th\n\nThese are 2 hour introductory sessions to get you started with Git and GitHub\nIntro sessions are identical; attend any that works for your schedule, or repeat sessions if you want to see the material twice\n\nSingle-topic skills sessions will be given Thursdays at 12:30pm PT/3:30pm ET and Tuesdays at 11:00am PT/2:00pm ET, with topics switching every two weeks.\nSee the NMFS Open Science Training Page for the training calendar or add the NMFS Open Science calendar to your calendar to see all events.",
    "crumbs": [
      "JupyterHub",
      "Welcome"
    ]
  },
  {
    "objectID": "content/setup/setup.html#setting-up-git-and-github",
    "href": "content/setup/setup.html#setting-up-git-and-github",
    "title": "Setup",
    "section": "Setting up Git and GitHub",
    "text": "Setting up Git and GitHub\n\nCreate a GitHub account\nInstall GitHub Desktop - Note that this will also install Git on your machine\nRequest access to NMFS GitHub Enterprise Cloud (NMFS staff and affiliates only)\n\nDownload the NMFS GitHub Enterprise Cloud user agreement\nUse this Google form to request access to Enterprise\nWait for follow-up email and confirm you’re a member (if you see a 404 page you haven’t been added yet)\n\nLog into GitHub and GitHub Desktop using your GitHub account credentials",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#signing-up-for-github-enterprise-cloud-ghec",
    "href": "content/setup/setup.html#signing-up-for-github-enterprise-cloud-ghec",
    "title": "Setup",
    "section": "Signing up for GitHub Enterprise Cloud (GHEC)",
    "text": "Signing up for GitHub Enterprise Cloud (GHEC)\n\nFollow the instructions on the GGT website to request access.\nWait to be invited to GHEC and accept\nThen you can sign in to an org like https://github.com/noaa-nwfsc with CAC or password+authentication",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec",
    "href": "content/setup/setup.html#authenticating-to-ghec",
    "title": "Setup",
    "section": "Authenticating to GHEC",
    "text": "Authenticating to GHEC\n\nUsing GitHub Desktop\n\nGo to GitHub Desktop &gt; Settings &gt; Accounts\nSign into GitHub.com. Ignore GitHub Enterprise!!\nDONE!",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-1",
    "href": "content/setup/setup.html#authenticating-to-ghec-1",
    "title": "Setup",
    "section": "Authenticating to GHEC",
    "text": "Authenticating to GHEC\n\nUsing GitHub Desktop\n\nHelp! I signed up for GitHub Enterprise and GitHub Desktop will not authenticate!! Log out of GitHub Desktop under GitHub Desktop &gt; Settings (or Options) &gt; Account and log back in.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nTell RStudio about Git\n\nIn RStudio, Tools &gt; Terminal &gt; New Terminal\nAt the command line (in the new terminal), type which git if on a Mac and where git if in Windows.\nCopy that path.\nIn RStudio, Tools &gt; Global Options &gt; Git/SVN There is a box at top that asks for the location of the Git binary.\nPaste that path in.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-1",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-1",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\nYou have to authenticate to GitHub separately for RStudio even if you are signed in on GitHub Desktop.\nIf you see anything like this, you have not authenticated.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-2",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-2",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nSet up\n\nInstall usethis R package\nRun this code:\n\nusethis::use_git_config(user.name = \"your username\", user.email = \"you@noaa.gov\")",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-3",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-3",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nCreate Token\nusethis::create_github_token(   scopes = c(\"repo\", \"workflow\"),   description = \"DESCRIBE THE TOKEN'S USE CASE\",   host = NULL )",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-4",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-4",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nCreate Token\n\nSet the date when the token will expire.\nScroll to bottom and click “Generate token”\nCopy the long PAT.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-5",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-5",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nConfigure PAT for GHEC\n\nNext to the PAT, you will see “Configure for SSO”.\nClick that and authenticate to your GHEC org",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-6",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-6",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nTell RSTudio about the PAT\nRun this code.\ncredentials::set_github_pat(\"THE LONG PAT)",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/resources.html#tutorials-and-workshops",
    "href": "content/resources.html#tutorials-and-workshops",
    "title": "Additional Git and GitHub Resources",
    "section": "Tutorials and Workshops",
    "text": "Tutorials and Workshops\n\n2024 GitHub Workshop Notes and Materials - Google Docs (NOAA employees and staff)\nLet’s Git started | Happy Git and GitHub for the useR\nVersion Control with Git: Summary and Setup\nGitHub Governance Team - Training (NOAA employees and staff)\nPractical R+Git Workflow for Scientists May-July 2022\nOpen Scientific Code using Git and GitHub | open-source-workshop\nMicrosoft Git and GitHub Trainings\nGitHub Skills",
    "crumbs": [
      "JupyterHub",
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#git-and-github-at-noaa-fisheries",
    "href": "content/resources.html#git-and-github-at-noaa-fisheries",
    "title": "Additional Git and GitHub Resources",
    "section": "Git and GitHub at NOAA Fisheries",
    "text": "Git and GitHub at NOAA Fisheries\n\nGitHub Governance Team Home Page (NOAA employees and staff)\nNMFS Open Science GitHub Guide\nGitHub Enterprise Cloud Access Guide (NOAA employees and staff)",
    "crumbs": [
      "JupyterHub",
      "Resources"
    ]
  },
  {
    "objectID": "content/resources.html#cheatsheets-and-reference",
    "href": "content/resources.html#cheatsheets-and-reference",
    "title": "Additional Git and GitHub Resources",
    "section": "Cheatsheets and Reference",
    "text": "Cheatsheets and Reference\n\nGitHub Git Cheat Sheet - GitHub Cheatsheets\nGitHub Docs\nGit Cheat Sheet - GitHub Education",
    "crumbs": [
      "JupyterHub",
      "Resources"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#aims-and-objectives",
    "href": "content/markdown/markdown.html#aims-and-objectives",
    "title": "Introduction to Markdown and README files",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain-text text documents. GitHub uses markdown for a variety of applications across repositories and projects, including for README files, issues, discussions, commit messages, and comments. This Introduction to Markdown skills session will use a a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with a foundation in markdown language formatting and editing.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/markdown/markdown.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Introduction to Markdown and README files",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#what-is-markdown",
    "href": "content/markdown/markdown.html#what-is-markdown",
    "title": "Introduction to Markdown and README files",
    "section": "What is Markdown?",
    "text": "What is Markdown?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#using-markdown-in-github---tutorial",
    "href": "content/markdown/markdown.html#using-markdown-in-github---tutorial",
    "title": "Introduction to Markdown and README files",
    "section": "Using Markdown in GitHub - Tutorial",
    "text": "Using Markdown in GitHub - Tutorial\n\n\n\n\n\n\nImportant\n\n\n\nGitHub Skills are systematically being updated to an issue-based workflow from the legacy README-based workflow. The following tutorial follows the updated issue-based workflow. If you began this exercise before 5-30-2025, your skills repository will look different from the current skills repository template. If this is the case, click here for the legacy README-based tutorial.\n\n\nGitHub Skills: Communicate using markdown\nWe’ll be using the Communicate Using Markdown Skills Tutorial to get some practice with markdown in GitHub. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Copy Exercise” button to make a new repository on your account:\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the repository, and click the “Go to Exercise” button in the README\n\n\n\n\n\n\n\nTip\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\nStep 3: Follow the exercise\n\nCreate a markdown file in a new branch\nIn this exercise, we will be using markdown to create an example “blog” page. The content provided in the exercise is just an example; we can give a more personal touch to our own content.\n\n\n\n\n\n\nTip\n\n\n\nDuring this tutorial, GitHub Skills will provide code blocks that you can copy directly to your clipboard to paste into the body of your Markdown document. But this defeats the purpose of getting practice with Markdown and building that muscle memory! Go ahead and type in your own content (don’t worry, it doesn’t have to match the example content perfectly)\n\n\n\nOn the Code tab of your repository, click the dropdown menu where it says “main”\n\nIn the “Find or create a branch” box, type start-blog and select “Create branch start-blog from main”\n\nCreate a new file by clicking the “Add file” button in your new branch (note this may look like a + symbol if you’re working in a condensed side-by-side view) and click “Create new file”\n\nAlong the top of the dialogue box, name your file day-1.md\n\nIn your new file, create a level one heading to give the page a title\n\nAdd a couple level 2 headings for the names of each of the blog posts\n\nClick the Preview tab in the top left of the dialogue box to view your rendered content\n\nClick the “Commit changes” button in the top right and commit the changes directly to the start-blog branch\n\n\n\n\nMake a list\n\nRe-open the day-1.md file and click “Edit this file”\n\nIn the ## Morning Planning section, add a list of each type: unordered, ordered, and task\n\n\n\n\n\n\n\n\nNote\n\n\n\nGitHub skills only asks for a task list, but we want you to have practice with all list types; adding the other types will not mess up the GitHub Skills workflow, so go ahead and practice adding all three types!\n\n\n\nPreview your content in the preview tab\n\nCommit your changes directly to the start-blog branch\n\n\n\n\nAdd a code sample\n\nAfter this commit, the day-1.md file should still be open. Click the “Edit this content” button to go back into editing mode\n\nIn the “Review” section, add a code chunk using the three backtick notation (it’s okay to use a different example than the one provided by GitHub Skills)\n\nPreview your content\n\nCommit your changes to the start-blog branch\n\n\n\n\nAdd an image\n\nOpen our day-1.md file in edit mode\n\nInsert an image below the the “Morning Planning” level 2 heading. To make things a little more interesting, let’s use the Scubatocat image located at https://octodex.github.com/images/scubatocat.png\n\nPreview your Markdown file\n\nGo back to the Edit tab and replace the image with an HTML version that changes the size and position\n\nPreview your updated image, and Commit changes to start-blog\n\n\n\nAdd some formatted text (off-script)\nBefore we finish up our tutorial, let’s add some formatted text. The GitHub Skills lesson does not mention anything about this, but it’s an important part of markdown that you should get some practice with!\n\nEdit your day-1.md file one more time\n\nUnder the Daily Learning heading, add some bolded, italicized, and in-line code text\n\nPreview your file, then commit your changes\n\n\n\n\nFinish work: Merge your blog post\nThis step doesn’t have anything to do with markdown, but it’s good practice for working with Pull Requests from a branch!\n\nSelect the “Pull requests” tab in the top navigation bar\n\nClick the “Compare & pull request” button for start-blog\n\nClick the “Create pull request button”\n\nMerge your pull request and confirm the merge",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#what-about-readme-files",
    "href": "content/markdown/markdown.html#what-about-readme-files",
    "title": "Introduction to Markdown and README files",
    "section": "What about README files?",
    "text": "What about README files?\nAll of the things we did in this tutorial can be done in a README file! To illustrate this, we can copy the contents of our day-1.md file over to our README.md file in our Skills repository:\n\nNavigate to the Code tab in the top navigation menu\n\nSelect day-1.md and switch to the Code view\n\nClick the “Copy raw file” button at the top of the dialogue box (looks like two overlapping squares)\n\nNavigate back to the Code tab, and edit the README file by clicking the “Edit file” button on the README\n\nReplace the text in the dialogue box with the copied text from the day-1.md file\n\nCommit your changes\n\nNavigate back to the Code tab (this should bring you to the home page of our repository, and scroll down to see your markdown-formatted README file!",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/intro/intro.html",
    "href": "content/intro/intro.html",
    "title": "Introduction to Git and GitHub",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#aims-and-objectives",
    "href": "content/intro/intro.html#aims-and-objectives",
    "title": "Introduction to Git and GitHub",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nThis introduction to Git and GitHub virtual workshop will be repeated twice weekly for three weeks. These sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with the knowledge required for basic repository management using Git commands, collaboration, and project management.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/intro/intro.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Introduction to Git and GitHub",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nCreate a GitHub account\nInstall GitHub Desktop - Note that this will also install Git on your machine\nRequest access to NMFS GitHub Enterprise Cloud (NMFS staff and affiliates only)\n\nDownload the NMFS GitHub Enterprise Cloud user agreement\nUse this Google form to request access to Enterprise\nWait for follow-up email and confirm you’re a member (if you see a 404 page you haven’t been added yet)\n\nLog into GitHub and GitHub Desktop using your GitHub account credentials",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#why-gitgithub",
    "href": "content/intro/intro.html#why-gitgithub",
    "title": "Introduction to Git and GitHub",
    "section": "Why Git/GitHub?",
    "text": "Why Git/GitHub?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#github-enterprise",
    "href": "content/intro/intro.html#github-enterprise",
    "title": "Introduction to Git and GitHub",
    "section": "GitHub Enterprise",
    "text": "GitHub Enterprise",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#git-and-github-the-basics",
    "href": "content/intro/intro.html#git-and-github-the-basics",
    "title": "Introduction to Git and GitHub",
    "section": "Git and GitHub: The basics",
    "text": "Git and GitHub: The basics",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#introduction-to-github---tutorial",
    "href": "content/intro/intro.html#introduction-to-github---tutorial",
    "title": "Introduction to Git and GitHub",
    "section": "Introduction to GitHub - Tutorial",
    "text": "Introduction to GitHub - Tutorial\nGitHub Skills - Introduction to GitHub\nWe’ll be using the Introduction to GitHub Skills Tutorial to get our feet wet with Git and GitHub. Follow along with the tutorial using your personal GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Copy Exercise” button to make a new repository on your account:\n\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button: \n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the instructions page. You’ll notice that the “Copy Exercise” button has switched from green to gray, and the “Start Exercise” button has switched from gray to green.\nRight click the “Start Exercise” button and open it in a new tab. This will open an Issue for this repository that will serve as the instructions for the exercise.\n\n\n\n\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\n\n\n\n\nStep 3: Follow the exercise\n\nCreate a new branch\nCreate a new branch following the instructions in the tutorial:\n\n\n\n\n\n\n\nIf you have the instructions open in side-by-side mode, you may notice that the github-actions bot will be producing new comments in the instructions.\n\n\n\nBe sure to wait until the bot is finished before starting the next part of the exercise!\n\n\n\n\nCreate a commit with a new file\nClick the “Add file” button to create a new file named PROFILE.md\n\n\n\n\n\n\n\nIf you’ve arranged your screen in a side-by-side mode, the “Add file” button may look a bit different!\n\n\n\nGitHub dynamically shortens certain buttons and tabs based on the size of the window. In this case, the “Add file” button becomes the “+” button:\n\n\n\nAdd a line to the new file, and click the “Commit changes” green button:\n\nChange the “Commit message” to “Add PROFILE.md” and click “Commit changes” to confirm the commit\n\n\n\nOpen a pull request\nRefresh the repository and click the “Compare & pull request” button.\n\nEdit the title field to read “Add my first file”, and provide a brief description of your pull request. Click “Create pull request”\n\n\n\n\n\n\n\nYou can follow the progress of the GitHub Actions running in the background after this step!\n\n\n\n\n\n\n\n\nMerge the pull request\nClick the green “Merge pull request” button, and confirm the merge. Delete the branch after merging (don’t worry, you can always restore a deleted branch)",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#working-in-github-desktop---tutorial",
    "href": "content/intro/intro.html#working-in-github-desktop---tutorial",
    "title": "Introduction to Git and GitHub",
    "section": "Working in GitHub Desktop - Tutorial",
    "text": "Working in GitHub Desktop - Tutorial\nTo get a bit more experience working with GitHub repositories, we are going to clone our tutorial repository, create a repository in GitHub Desktop, make a commit, and push our changes up to GitHub.\n\nStep 1: Log into GitHub\nIf this is your first time using GitHub Desktop, you will need to log in to your GitHub account. Open a browser window to GitHub, and make sure you’re logged in to your GitHub account. If you are on the NMFS GitHub Enterprise Cloud, you will also need to be logged in using SSO.\n\n\nStep 2: Open GitHub Desktop and clone a repository\nOn your local computer, open GitHub Desktop. Click “Clone a repository from the Internet…”\n\nClick “Sign in” and “Continue with browser” to open a browser window and sign into GitHub Desktop.\n\n\n\n\n\n\nWhen logging into GitHub Desktop for the first time, you will be presented with a tabbed window as shown below. To access GitHub Enterprise, do not use the Enterprise tab on the login window! This is for a locally-hosted GitHub Enterprise server. The NMFS GitHub Enterprise is cloud-hosted, so to access enterprise repositories from GitHub Desktop, you will need to be logged into the enterprise (via SSO) through your browser.\n\n\n\n\n\n\nEnter the name of the GitHub Skills repository we just finished (skills-introduction-to-github) into the search box. Select the repository, choose where to clone the repository to on your local machine, and click “Clone”.\n\n\n\n\n\n\n\nWhere should you clone your repository to?\n\n\n\nFor transient repositories (i.e., repositories that you only plan to work on briefly or occasionally), I suggest creating a folder on your local file system just for these GitHub repositories. If you’re working on a project and already have a file folder structure for that project, you can clone and/or create your repository inside the existing folder structure.\n\n\n\n\nStep 3: Create a new repository\nClick the dropdown where it says “Current repository” in the upper left corner of GitHub Desktop. This will bring up a list of your repositories available on your local machine. For those who are new to GitHub Desktop, this should only include our GitHub Skills repository. Click the “Add” dropdown menu, and click “Create new repository…”\n\nThere are several aspects of a repository you will need to keep in mind when creating a new one from scratch:\n\nName: Make your name distinct and descriptive, but not too long. Don’t use spaces (remember, this will be included as part of the URL). Git and GitHub repositories often use kebab case.\nDescription:Add a brief description to your repository that describes its purpose\nLocal path: Similarly to when you clone a repository into a folder, you need to tell GitHub Desktop where to start a new repository. This will autofill to the directory you specified when installing GitHub Desktop for the first time, but you are welcome to change it to wherever you want your repository stored on your local computer. You can always move a repository after creation.\nREADME file: It is always a good idea to initialize the repository with a README file. This file will serve as the “front page” of your repository on GitHub. You can add a more detailed description of the repository, what it will be used for, instructions for how it should be used by others, etc. If your repository contains datasets, you can also use the README to add metadata. See this link for more information on README files.\nGit ignore: A .gitignore file tells Git what files and folders to not track. These files will still reside on your local repository, but will not be included in a Commit action or accessible on GitHub. Typically, these files are system files for the coding language or IDE you’re using, but can also include files that you don’t want to be shown on GitHub. This may include things like data files that are too big or too sensitive to be hosted on GitHub, code files that include sensitive material, and scratch or intermediate files. When creating a new repository, you can choose to pre-populate the .gitignore file based on the primary coding language you expect to use most in the repository.\nLicense: Any public-hosted GitHub repository should contain a license for open source use. The latest NOAA recommendation is to use Apache License 2.0\n\nGo ahead and fill in the fields and Create your repository.\n\n\n\nStep 4: Publish your repository to GitHub\nAfter creating your repository, GitHub Desktop will open it automatically. However, at this point your repository is only available on your local machine. Go ahead and click the button to publish your repository to GitHub.\n\nYou can choose whether to keep your repository private or let it be viewed by the public. You can also choose to publish the repo to your personal account, or to an organization (e.g., your center’s Enterprise account). In general, for the sake of open science we normally suggest keeping a repository public unless it contains sensitive or proprietary data. For now, we’ll keep this practice repo public.\n\n\n\nStep 5: Modify the README file in your repository\nYou can now open your repository in an editor or IDE (e.g., RStudio), show the files in a file explorer window, or view the repository on GitHub. We will take advantage of the ability to open the repo in the editor to make a change to our repository’s README file.\nOpen your repository in whatever editor you choose (I have mine configured to use RStudio) by clicking the button in GitHub Desktop.\n\nIn your editor, open the README.md file. You will notice that the README file is prepopulated with the title of your repository as a first-level header and your brief description. Make a change to your README file (maybe change the title and add a bit more context to the description), and save your changes. Close your editing program.\n\n\n\nStep 5: Commit your changes\nIn GitHub Desktop, you will notice that the README.md file has now been added to the “Changed files” list on the left-hand side, and the changes are shown in the main pane as a series of deletions and additions. The check-marks indicate that those changes are staged and should be included in the commit. If you change your mind and don’t want a change to be committed, you can click the check mark and it will change to an “unstaged” state. For now, leave all changes staged.\n\nIn the bottom left, you will see a box for your commit message and a description. These allow you to describe the changes made in a particular commit. A more descriptive message can help others (and future you) to understand why you made a particular change. GitHub Desktop will prepopulate the message field if you’re only modifying one file, but it’s often a good idea to change this to something more descriptive. You can go into more details in the description field if necessary, but this is optional.\nChange your commit file, and commit to the “main” branch.\n\n\n\nStep 6: Push your commit to GitHub\nAfter you commit your changes, GitHub Desktop will prompt you to “Push commits to the origin remote”. This is how we will get our local changes up on GitHub. Click the “Push origin” button.\n\nOpen the repository in GitHub in your browser to see what the changes we made to our README look like on GitHub.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#project-management",
    "href": "content/intro/intro.html#project-management",
    "title": "Introduction to Git and GitHub",
    "section": "Project Management",
    "text": "Project Management",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html",
    "href": "content/inperson/cb_genetics.html",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#aims-and-objectives",
    "href": "content/inperson/cb_genetics.html#aims-and-objectives",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nThis sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff within the Conservation Biology Genetics and Evolution Program with the knowledge required for basic repository management using Git commands, collaboration, and project management, as well as dedicated time to put these skills to use in setting up an existing project or workflow with Git and GitHub.",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#agenda",
    "href": "content/inperson/cb_genetics.html#agenda",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Agenda",
    "text": "Agenda\n\n10:00-10:10 Why Git/GitHub?\n10:10-10:20 GitHub Enterprise\n10:20-10:50 Introduction to GitHub - Tutorial\n10:50-11:30 Pull Requests and Collaboration - Tutorial\n11:30-11:45 Break\n11:45-12:15 Project Management\n12:15-13:00 Putting Everything Together",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#why-gitgithub",
    "href": "content/inperson/cb_genetics.html#why-gitgithub",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Why Git/GitHub?",
    "text": "Why Git/GitHub?",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#github-enterprise",
    "href": "content/inperson/cb_genetics.html#github-enterprise",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "GitHub Enterprise",
    "text": "GitHub Enterprise",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#introduction-to-github---tutorial",
    "href": "content/inperson/cb_genetics.html#introduction-to-github---tutorial",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Introduction to GitHub - Tutorial",
    "text": "Introduction to GitHub - Tutorial\nGitHub Skills - Introduction to GitHub",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#pull-requests-and-collaboration---tutorial",
    "href": "content/inperson/cb_genetics.html#pull-requests-and-collaboration---tutorial",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Pull Requests and Collaboration - Tutorial",
    "text": "Pull Requests and Collaboration - Tutorial\nGitHub Skills - Review Pull Requests\nGitHub Skills - Resolve Merge Conflicts",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#project-management",
    "href": "content/inperson/cb_genetics.html#project-management",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Project Management",
    "text": "Project Management",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#putting-everything-together",
    "href": "content/inperson/cb_genetics.html#putting-everything-together",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Putting Everything Together",
    "text": "Putting Everything Together",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/forking/forking.html#aims-and-objectives",
    "href": "content/forking/forking.html#aims-and-objectives",
    "title": "Forking Repositories in GitHub (and beyond)",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nForking is one of the main collaborative tools available that make GitHub such a powerful platform for open source development. Forks allow developers across all of GitHub to iterate on ideas and changes before they are proposed back to the parent repository. This skills session will use directed, interactive lessons to provide NOAA Fisheries staff with a foundation in using forks for open source development in GitHub.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Forking Repositories in GitHub (and beyond)"
    ]
  },
  {
    "objectID": "content/forking/forking.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/forking/forking.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Forking Repositories in GitHub (and beyond)",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nWe will also be using a bit of Markdown, so you may want to refresh yourself on Markdown language with our Introduction to Markdown lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Forking Repositories in GitHub (and beyond)"
    ]
  },
  {
    "objectID": "content/forking/forking.html#what-is-a-fork",
    "href": "content/forking/forking.html#what-is-a-fork",
    "title": "Forking Repositories in GitHub (and beyond)",
    "section": "What is a Fork?",
    "text": "What is a Fork?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Forking Repositories in GitHub (and beyond)"
    ]
  },
  {
    "objectID": "content/forking/forking.html#tutorial-forking-a-repository",
    "href": "content/forking/forking.html#tutorial-forking-a-repository",
    "title": "Forking Repositories in GitHub (and beyond)",
    "section": "Tutorial: Forking a repository",
    "text": "Tutorial: Forking a repository\nFor this tutorial, we’re going to be forking a demo repository (https://github.com/nmfs-opensci/GitHub-Clinic-demos), editing our forked copies, and creating a pull request to contribute back to the main repository. Follow along on your own account.\n\nStep 1: Fork the repository\n\nOpen the demo repository in GitHub.\n\nAt the top of the repository, click the Fork button\n\nKeep everything default (your account should be listed under Owner, and the Repository name should be pre-filled for you). Click the green Create Fork button.\n\nYou now have a copy of the original repository in your account. Note that the fork is still connected to the parent repository, so when a change is made to the parent, you can sync it to your fork\n\n\n\n\nStep 2: Add content to your forked repository\nWe’re going to add a recipe to our forked repository. You can add whatever recipe you’d like, with as many details as you’d like; for this demonstration, we’ll keep it simple (we’ve provided a more detailed chocolate chip recipe as an example to start out).\n\nClick on the recipes folder in the file tree of your forked repository, click the Add file dropdown, and click “Create new file”\n\nName your recipe file, and make sure it ends in .md. We’re making a markdown file here, so we need the .md file extension.\n\nEnter your recipe into the file contents. Remember that we can use markdown formatting here; let’s take advantage of that by adding a title and a couple headings for ## Ingredients and ## Instructions.\nCommit your changes to the main branch of your repository.\n\n\n\n\nStep 3: Contribute your recipe to the parent repository\n\nOpen the Contribute drop-down on the repository, and click the green Open pull request button to contribute this recipe back to the parent repository.\n\nYour Pull Request (PR) will auto-populate the title with your commit message. You can edit this if you want, or add an extended description. Generally the more descriptive the better, especially if you’re fixing a bug or adding a feature to another repository. For now, we can be brief. Add a description, and click Create pull request\n\nOnce you create the PR, you’ll be brought to the PR on the parent repository. Note that if you do not have write permission on the parent repository, you will not have the option to merge the pull request. But if you do, you can review the pull request and merge it in if everything looks good!\n\n\n\n\nStep 4: Sync changes from parent to your fork\nIf a change was made to the parent repository, you can sync that change to your forked repository. For this demo, I added the number of cookies that are made to the chocolate chip cookie recipe (on the main nfms-opensci repository). Let’s see how we can integrate that change to our fork.\n\n\nNavigate to your forked repository.\n\nNotice that the repository notifies you of the number of commits ahead of the parent and behind the parent your fork is. In that same message box, click the Sync fork dropdown, and click Update branch. Note that if you have commits that have not been merged into the parent, you can either discard your commit before the merge (so your fork matches the parent) or keep it and merge the changes from the parent into your fork.\n\nTo verify that your merge worked, click the Sync fork dropdown again. If everything worked, you should have a message that your branch is not behind the upstream (parent) repository",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Forking Repositories in GitHub (and beyond)"
    ]
  },
  {
    "objectID": "content/branches/branches.html#aims-and-objectives",
    "href": "content/branches/branches.html#aims-and-objectives",
    "title": "Branches and Pull Requests",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nBranches allow you to develop features, fix bugs, or safely experiment with new ideas in a contained area of your repository. They can be particularly useful when collaborating within a team, allowing for independent development of different areas of the repository that do not interfere with each other. This skills session will use directed, interactive lessons to provide NOAA Fisheries staff with a foundation in using branches in concert with pull requests for collaborative development.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Branches and Pull Requests"
    ]
  },
  {
    "objectID": "content/branches/branches.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/branches/branches.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Branches and Pull Requests",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nWe will also be using a bit of Markdown, so you may want to refresh yourself on Markdown language with our Introduction to Markdown lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Branches and Pull Requests"
    ]
  },
  {
    "objectID": "content/branches/branches.html#what-is-a-branch",
    "href": "content/branches/branches.html#what-is-a-branch",
    "title": "Branches and Pull Requests",
    "section": "What is a Branch?",
    "text": "What is a Branch?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Branches and Pull Requests"
    ]
  },
  {
    "objectID": "content/branches/branches.html#tutorial-making-and-merging-a-branch",
    "href": "content/branches/branches.html#tutorial-making-and-merging-a-branch",
    "title": "Branches and Pull Requests",
    "section": "Tutorial: Making and merging a branch",
    "text": "Tutorial: Making and merging a branch\nFor this tutorial, we’re going to be forking a demo repository (https://github.com/nmfs-opensci/GitHub-Clinic-demos), making a branch on our forked copies, editing our forked copies, and creating a pull request to contribute back to the main branch. Follow along on your own account.\n\nStep 1: Fork the repository\n\nOpen the demo repository in GitHub.\n\nAt the top of the repository, click the Fork button\n\nKeep everything default (your account should be listed under Owner, and the Repository name should be pre-filled for you). Click the green Create Fork button.\n\n\n\n\nStep 2: Create a new branch\n\nOn the Code tab of your forked repository, click the dropdown menu where it says main\nIn the text box where it says “Find or create a branch”, type the name of your branch. Let’s call it tutorial. Click the Create branch tutorial from main button to create your branch.\n\n\n\n\nStep 2: Add content to your new branch\n\nLet’s add a new file to our repository. Click the Add file (+) drop-down menu, and click Create new file.\n\nName your file intro.md and add some content to your file. If you’d like, you can copy the following markdown chunk and paste it into your file.\n\n\n# Introduction\n\nThis repository serves as a sandbox demo for the NOAA Fisheries GitHub Clinic. Feel free to fork this repository and use it to practice Git and GitHub tools and methods.\n\nCommit your changes to the tutorial branch.\n\n\n\n\nStep 3: Create a pull request\n\nClick the Pull requests tab at the top of the repository. GitHub should recognize that you made a push to your tutorial branch. Click the green Compare & pull request button to start a pull request to merge the pushes from tutorial into main.\n\nNotice that because we’re working from a forked repository, GitHub will automatically fill in the parent repository (nmfs-opensci/GitHub-Clinic-demos) as the repository to merge into. For this tutorial, we instead will merge into the main branch of our forked copy of the repository. Click the drop-down menu where it says “base repository:” and select your forked copy.\n\nGitHub will pre-populate the title of our pull request based on the commit message. If we have multiple commits, we would need to make our own pull request title. Make sure the title is clear and concise, and add a detailed blurb to the description section. For our example, this can be as simple as describing the intent of the pull request. For more complex pull requests that involve adding to or modifying code and text in multiple files, we want to guide the reviewer through your changes as much as possible. Be as detailed as you need to be to convey the changes that were made and why they were made. You can even add images, screenshots, videos, and links to showcase how the changes you made are reflected for the end user.\n\nClick the green Create pull request button to finalize our pull request.\n\n\n\n\nStep 4: Review and merge your pull request\nReviewing a pull request is an important step of the collaborative process on GitHub. Pull request reviews allow the owner of a repository or another collaborator to read through changes line-by-line, adding comments and proposing edits along the way. Think of a pull request review as being similar to a manuscript or report review using track changes.\nBefore we merge our changes into our main branch, let’s get some practice with reviewing pull requests. This step is not as important when you’re the only one working on a repository (like in our tutorial), but it’s good practice for future collaborations.\n\nAssign yourself as a reviewer to the pull request using the Assignees dropdown on the right-hand side of your pull request. In a collaborative setting, you can assign up to 10 of your collaborators.\n\nNavigate to the Files changed pane in the pull request. This is where we’ll conduct our review.\n\nJust like in a manuscript peer review, we can leave a narrative review with general comments and recommendations, and we can also add comments and propose edits to specific lines. Let’s add a comment to change the first-level heading of our markdown file. Hover your mouse in the space between the line numbers and the content. You’ll see a highlighted + icon appear next to each line. Click the + icon next to line 1.\n\nThis will open up a dialog box where we can add a comment or suggest a change to this specific line. Lets suggest a change to the heading name. Click the icon next to the Preview tab. This icon is the Add a suggestion icon. Notice that when you click this icon, it inserts a code snippet into our dialog box with the label suggestion. Inside this code snippet, suggest a change to the # Introduction header to read # Purpose of this repository.\n\nFrom here, we can either add our suggestion as a single comment to the pull request conversation, or start a review based on this suggestion. Let’s go ahead and click the green Start a review button.\nFrom here, we can add more line-by-line comments and suggestions, or we can finish our review with our general impressions. Let’s click the green Finish your review button (notice there is a ticker that tracks the number of line-by-line comments/suggestions).\n\nAdd a comment to your review summarizing your comments and changes and giving overall impressions. Click the green Submit review button to finalize your review.\n\nAs the original creator of the pull request, you can now commit the proposed change directly to the pull request, continue the conversation to refine the suggestion, or decline the suggestion and Resolve the conversation. Let’s commit the proposed change from the pull request review.\n\nOnce your change has been committed, we’re ready to merge the pull request! Click the green Merge pull request button, and confirm your merge with a merge commit.\n\n\nCongratulations! You have merged a pull request from a branch. You can now optionally delete the branch (don’t worry, you can always restore it from the pull request). During the next GitHub Clinic session on Git Workflows, we’ll discuss reasons and scenarios where you may want to keep a permanent branch versus creating and deleting ephemeral branches for development. For now, let’s go ahead and delete our branch to close out this tutorial.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Branches and Pull Requests"
    ]
  },
  {
    "objectID": "content/github-pages/github-pages.html#aims-and-objectives",
    "href": "content/github-pages/github-pages.html#aims-and-objectives",
    "title": "Hosting a repository as a website with GitHub Pages",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nGitHub Pages lets you turn your repository into a website. This is a great way to share your project, resume, portfolio, documentation, or even a blog with the world. When you enable GitHub Pages on a repository, GitHub takes the content that’s on the main branch (or you can specify a different branch) and publishes a website based on its contents. This GitHub Pages skills session will use directed, interactive lessons to provide NOAA Fisheries staff with a foundation in hosting web content through GitHub Pages.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Hosting a repository as a website with GitHub Pages"
    ]
  },
  {
    "objectID": "content/github-pages/github-pages.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/github-pages/github-pages.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Hosting a repository as a website with GitHub Pages",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nWe will also be using a bit of Markdown and discussing README files, so you may want to refresh yourself on Markdown language with our Introduction to Markdown lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Hosting a repository as a website with GitHub Pages"
    ]
  },
  {
    "objectID": "content/github-pages/github-pages.html#github-pages-a-primer",
    "href": "content/github-pages/github-pages.html#github-pages-a-primer",
    "title": "Hosting a repository as a website with GitHub Pages",
    "section": "GitHub Pages: A primer",
    "text": "GitHub Pages: A primer",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Hosting a repository as a website with GitHub Pages"
    ]
  },
  {
    "objectID": "content/github-pages/github-pages.html#tutorial-making-a-basic-landing-page-from-a-readme-file-with-github-pages",
    "href": "content/github-pages/github-pages.html#tutorial-making-a-basic-landing-page-from-a-readme-file-with-github-pages",
    "title": "Hosting a repository as a website with GitHub Pages",
    "section": "Tutorial: Making a basic landing page from a README file with GitHub Pages",
    "text": "Tutorial: Making a basic landing page from a README file with GitHub Pages\nFor this tutorial, we’re going to be taking a step away from GitHub Skills and creating a basic landing page for a repository using GitHub Pages. Our example is going to be a little boring, but a basic README-based landing page can be formatted to look great! Here’s an example from NMFS Open Science of a formatted README-based landing page:\n\n\nStep 1: Create a new repository\n\nOn the GitHub home page, click the + in the upper right corner of, and select New repository.\n\nName your repository “github-pages”, and make sure to check the Add a README file box. Make your repository public (you’ll need to do this to enable GitHub Pages), and create your repository.\n\n\n\n\nStep 2: Enable GitHub Pages\n\nNavigate to the Settings tab of your new repository.\n\nOn the left-hand side, select the Pages section under Code and automation\n\nUnder Source, make sure “Deploy from a branch” is selected (it should be the default). Under Branch, click the drop-down where it says “None” and select “main”.\n\nThis will add an additional drop-down to select the directory that GitHub will look for your content. For more complex websites, we can change this to point to a different directory where all of our HTML content will be rendered. For a simple README-based landing page, we can leave this as it’s default / (root). This points to the root, or home, directory of your repository where your README file resides.\n\nSave your changes. At this point, a special GitHub Action will spin up in the background to build your GitHub Pages website.\n\n\n\n\n\n\nTip\n\n\n\nYou can track the progress of your build by navigating to the Actions tab at the top of your repository. Click the “pages build and development” workflow to see what GitHub Actions is doing to build your website.\n\n\n\nOnce your website is built, you can view it by clicking the link in the Actions tab, or you should see a banner at the top of your GitHub Pages settings page with the link to your new website. Click the link and check out your new website!\n\n\n\n\n\nStep 3: Customize our website\nOur website as it currently stands is a little dull. Let’s add a theme and some content to make it a little nicer!\n\nAdd a file to your repository in the root (base) directory called _config.yml.\n\n\n\nIn the file contents, add the following lines:\n\ntitle: GitHub Pages Demo Website\ntheme: jekyll-theme-slate\n\n\nCommit your changes, then edit your README.md file (you can click the edit button on the main page)\n\nChange your first-level heading to a suitable front page title, and add some content\n\nCommit your changes, wait about 30 seconds, and navigate to your website to see what our changes look like when rendered",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Hosting a repository as a website with GitHub Pages"
    ]
  },
  {
    "objectID": "content/github-pages/github-pages.html#tutorial-github-pages-x-quarto-templates-for-nmfs-branded-websites",
    "href": "content/github-pages/github-pages.html#tutorial-github-pages-x-quarto-templates-for-nmfs-branded-websites",
    "title": "Hosting a repository as a website with GitHub Pages",
    "section": "Tutorial: GitHub Pages x Quarto templates for NMFS-branded websites",
    "text": "Tutorial: GitHub Pages x Quarto templates for NMFS-branded websites\nREADME-based webpages can be useful for one-off landing pages, but in general we’ll want to use something a little more complex to build a webpage. There are many open-source webpage applications to create a website using GitHub Pages. Quarto, which is a Markdown-based publishing software, is a particularly powerful tool for creating a website. However, building a Quarto website from scratch can be tedious.\nThankfully, Quarto and GitHub make it easy to create and share templates for GitHub Pages sites, many of which are plug-and-play; simply add your own content (or replace the current content with your own), and you’re up and running with a clean, themed, feature-rich website! NMFS Open Science provides several templates to create a NOAA Fisheries-themed website. Let’s use one of these to create a more complex website.\n\nStep 1: Copy a Quarto website template to your GitHub\nWe’re going to use the NOAA-quarto-simple template to create our website. Navigate to the repository on GitHub and click the green Use this template button. Select “Create a new repository”.\n\nOn the Create a new repository page, make sure the check-box next to “Include all branches” is selected (GitHub Pages is set up to deploy from the gh-pages branch, so we need all branches to be copied over to our version of the repository). Give your repository a name (make sure your account is selected as the Owner), and make sure the repository is set to public. Click the green Create repository button to copy the template to your GitHub.\n\n\n\nStep 2: Configure GitHub Actions\nIf you’ll recall from the slides, Quarto files need to be rendered to HTML for GitHub Pages to properly display them as a webpage. The NMFS Open Science Quarto website templates use GitHub Actions, an automation tool provided by GitHub, to automatically render these files to HTML (and push them to the gh-pages branch from where GitHub Pages is set to deploy). We need to make sure that these actions have the proper permissions to write to our repository.\nIn the Settings tab of your repository, click the dropdown under the Actions section on the left-hand side and select the General category.\n\nScroll to the bottom of this section, and under the Workflow permissions heading, select the option for Read and write permissions. Save your changes.\n\n\n\n\n\n\nNote\n\n\n\nA GitHub Actions workflow began when we initially made our repository. You may receive a notification that the Action failed when it finishes running. That’s okay. As long as we have this Workflow permissions option configured, the GitHub Action workflow should succeed the next time we commit to our repository.\n\n\n\n\n\nStep 3: Verify that GitHub Pages is building your site\nNavigate to the Pages section of the Settings tab on your newly-created repository. Previously, we built our website from the main branch. In this case, we’re building from a separate, dedicated gh-pages branch (still at the root of that branch).\n\nVerify that your site is live by clicking the link in GitHub Pages.\n\nTo broadcast that your website is up and running (and provide a more convenient location to access the site URL), we can add a link to the website to our repository home page. On your repository home page, click the gear icon for the About section, click the checkbox next to “Use your GitHub Pages website” under the Website header, and save your changes.\n\n\n\nStep 4: Edit your new website\nTo make changes to your new website, navigate to the Code tab of the repository, and select the content folder of the main branch. Here, you’ll have several markdown files that you can edit to your heart’s content!\n\n\n\n\n\n\nImportant\n\n\n\nIf you make changes to the file names, you’ll need to make corresponding changes to the _quarto.yml file. This is more advanced, and a bit outside of the scope of our tutorial, but I encourage you to check out the Websites and books section of the R for Data Science ebook to learn more.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Hosting a repository as a website with GitHub Pages"
    ]
  },
  {
    "objectID": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project",
    "href": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project",
    "title": "Putting Everything Together",
    "section": "Practice creating a repository for your own project",
    "text": "Practice creating a repository for your own project\n\nOpen GitHub Desktop\nLogin with your GitHub account (if you have not already done so)\nCreate a new repository\nMove your code and other project files into your new repository\nMake a commit with your initial files\nPush your commit up to GitHub"
  },
  {
    "objectID": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project-1",
    "href": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project-1",
    "title": "Putting Everything Together",
    "section": "Practice creating a repository for your own project",
    "text": "Practice creating a repository for your own project\n\nOpen the repository in your browser\nAdd your teammates as collaborators\nCreate an issue and tag a teammate\nMake a change to the README and commit in a new branch\nCreate a pull request\nMerge the pull request into your main branch"
  },
  {
    "objectID": "content/markdown/markdown-legacy.html#using-markdown-in-github---tutorial",
    "href": "content/markdown/markdown-legacy.html#using-markdown-in-github---tutorial",
    "title": "Introduction to Markdown and README files",
    "section": "Using Markdown in GitHub - Tutorial",
    "text": "Using Markdown in GitHub - Tutorial\n\n\n\n\n\n\nImportant\n\n\n\nGitHub Skills are systematically being updated to an issue-based workflow from the legacy README-based workflow. If you began this exercise before 5-30-2025, your skills repository will look different from the current skills repository template. The following tutorial follows the legacy README-based workflow.\n\n\nGitHub Skills: Communicate using markdown\nWe’ll be using the Communicate Using Markdown Skills Tutorial to get some practice with markdown in GitHub. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Start Course” button to make a new repository on your account:\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the instructions page. You’ll notice that the README output has changed to show the steps for the tutorial:\n\n\n\n\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\n\n\n\n\nStep 3: Follow the exercise\n\nOpen a pull request\nCreate a new pull request following the instructions in the tutorial: \nOpen a new window and navigate to the Pull Requests tab in GitHub, then click the green New button to open a new Pull Request:\n\nClick the “compare” dropdown and select “start-markdown”\n\nMake sure the green “Able to merge” message shows, and click “Create pull request”, then “Create pull request” again.\n\nNavigate to the “Files changed” tab after the pull request has been created\n\nScroll to the bottom of the page to the index.md file, click the three dots, and select “Edit file”\n\nAdd a first-level header by entering # followed by a space in the Edit textbox. You can play around with adding other levels of headers.\n\nClick the “Preview” button above the dialogue box to see what your headers will look like in your file.\n\nClick the “Commit changes” button at the top of your file (note that this is different from the instructions from GitHub Skills). Add a meaningful message, and click the Commit changes button.\n\n\n\nWait 20 seconds for GitHub Actions to run in the background, then refresh the instructions page.\n\n\n\n\nAdd an image\nWhen you committed the changes, GitHub should have taken you back to the bottom of the “Files changed” page. If not, navigate to this pane and scroll to the bottom, click the three dots, and click the “Edit file” option again.\n\nIn the file, add a markdown image. For this example, we can use our SCUBAtocat.\n\nClick the Preview tab to check your Markdown formatting \nCommit your changes, and wait another 20 seconds for GitHub actions to update to the next step.\n\n\n\nAdd a code example\nEdit the index.md file again.\n\nAdd some code in a code block (you can use either example in the instructions)\n\nPreview your code block.\n\nCommit your changes to the file, and wait another 20 seconds before refreshing the instructions page.\n\n\n\nAdd a task list\nEdit the index.md file again.\n\nMake a markdown task list using the - [] notation\n\nPreview your task list.\n\nCommit your changes to the file, and wait another 20 seconds before refreshing the instructions page.\n\n\n\nMerge the pull request\nClick the Conversation tab in your pull request\n\nScroll to the bottom of the page, click “Merge pull request”, and confirm the merge. Wait 20 more seconds, then refresh the instructions page to finish the course."
  },
  {
    "objectID": "content/markdown/markdown-legacy.html#what-about-readme-files",
    "href": "content/markdown/markdown-legacy.html#what-about-readme-files",
    "title": "Introduction to Markdown and README files",
    "section": "What about README files?",
    "text": "What about README files?\nAll of the things we did in this tutorial can be done in a README file! To illustrate this, we can copy the contents of your index.md file over to your README.md file in your Skills repository:"
  },
  {
    "objectID": "content/merge-conflicts/merge-conflicts.html#aims-and-objectives",
    "href": "content/merge-conflicts/merge-conflicts.html#aims-and-objectives",
    "title": "Merge Conflits in Git and GitHub",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nMerge conflicts occur when you merge branches that have competing commits. Knowing how to address merge conflicts, and how to avoid them in the first place, is a key aspect to developing your workflows in Git and GitHub. This skills session will use directed, interactive lessons to provide NOAA Fisheries staff with an understanding of why merge conflicts happen, strategies to avoid merge conflicts, and how to address them if they do occur.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Merge Conflits in Git and GitHub"
    ]
  },
  {
    "objectID": "content/merge-conflicts/merge-conflicts.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/merge-conflicts/merge-conflicts.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Merge Conflits in Git and GitHub",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nGit workflows are based around the concept of branching. If you are not familiar with branches, be sure to take a look at our Branches and Pull Requests lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Merge Conflits in Git and GitHub"
    ]
  },
  {
    "objectID": "content/merge-conflicts/merge-conflicts.html#addressing-merge-conflicts-in-git-and-github",
    "href": "content/merge-conflicts/merge-conflicts.html#addressing-merge-conflicts-in-git-and-github",
    "title": "Merge Conflits in Git and GitHub",
    "section": "Addressing Merge Conflicts in Git and GitHub",
    "text": "Addressing Merge Conflicts in Git and GitHub",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Merge Conflits in Git and GitHub"
    ]
  },
  {
    "objectID": "content/merge-conflicts/merge-conflicts.html#tutorial-resolve-merge-conflicts-with-github-skills",
    "href": "content/merge-conflicts/merge-conflicts.html#tutorial-resolve-merge-conflicts-with-github-skills",
    "title": "Merge Conflits in Git and GitHub",
    "section": "Tutorial: Resolve merge conflicts with GitHub Skills",
    "text": "Tutorial: Resolve merge conflicts with GitHub Skills\nGitHub Skills: Resolve merge conflicts\nWe’ll be using the Resolve merge conflicts GitHub Skills tutorial to practice creating a resolving a merge conflict. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Start the course\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Start course” button to make a new repository on your account:\n\nWhen you open up the “Start course” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the repository.\n\n\n\n\n\n\nTip\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs.\n\n\n\n\n\nStep 3: Follow the exercise\nIn this exercise, we will be demonstrating how to resolve a merge conflict. GitHub Actions has introduced a change to a file on a branch that conflicts with another branch. We’ll go through the process of merging that change in, creating the merge conflict, and fixing it.\n\nCreate a pull request\nSince merge conflicts occur when merging from a pull request, we’ll start by creating a new pull request.\n\nOn the Pull requests tab of the repository, open a new pull request by clicking the green New button. Keep main as the base branch, and set the compare branch to my-resume. Click the green Create pull request button.\n\nEnter “Resolving merge conflicts” as the title of the pull request, and click Create pull request.\n\nWait 20 seconds and refresh the instructions README page.\n\n\n\nResolve a merge conflict\n\nThe pull request we created has a conflict. Click the Resolve conflicts button in your pull request.\n\nLook for the line that starts with &lt;&lt;&lt;&lt;&lt;&lt;&lt; my-resume and ends with &gt;&gt;&gt;&gt;&gt;&gt;&gt; main (it should be lines 5-9). These are your merge conflict indicators.\n\nNow we have to choose what to keep and what to get rid of. For this exercise, we’ll keep the changes made on the my-resume branch and remove the changes made on the main branch. Do this by deleting all content below the ======= and above &gt;&gt;&gt;&gt;&gt;&gt;&gt; main (this should just be one line).\n\nDelete the merge conflict indicators on lines 5, 7, and 8 to retain only the change that was made on the my-resume branch.\n\nClick the Mark as resolved button in the upper right, and commit the merge.\n\nWait about 20 seconds and refresh the instructions README page.\n\n\n\nCreate your own conflict\nNow that we know how to resolve a merge conflict, let’s create one of our own to see how they may occur. The GitHub Actions bot added a new file to the main branch. We’ll create the same file in the my-resume branch that has different content.\n\nOn the Code tab, click the dropdown where it says main and switch to the my-resume branch.\n\nClick the Add file dropdown (it might look like a + if you’re in a condensed window) and create a new file. Name it references.md.\n\nAdd some content to the file. The content doesn’t really matter, as long as it’s different from the copy on main. Commit your changes directly to the my-resume branch with an appropriate commit message.\n\nWait 20 seconds and refresh the instructions README page.\n\n\n\nMerge your pull request\nOur commit created a merge conflict in our existing pull request. Let’s deal with that before we finalize our new merge.\n\nIn the Pull requests tab, open your “Resolving merge conflicts” merge request. Click the Resolve conflicts button at the bottom of the pull request.\n\nFollowing the instructions from above, resolve the merge conflict.\n\nMark the conflict as resolved, and commit your merge.\n\nMerge your pull request, and delete the my-resume branch.\n\nWait 20 seconds then refresh the instructions README page.\nYou’re finished with the tutorial! Feel free to experiment with creating and resolving merge conflicts to get comfortable with the process.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Merge Conflits in Git and GitHub"
    ]
  },
  {
    "objectID": "content/schedule.html",
    "href": "content/schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Introductory workshops were held Mondays at 10am PT/1pm ET and Tuesdays at 1pm PT/4pm ET for 3 weeks starting April 7th.\nSingle-topic sessions are being held Thursdays at 12:30pm PT/3:30pm ET and Tuesdays at 11:00am PT/2:00pm ET, with topics switching every two weeks starting May 29th.\nSee the Open Science Calendar for meeting links. Note that recordings and calendar links are restricted to NOAA employees and affiliates.\n\n\n\n\n\n\n\n\n\n\nTopic\nDescription\nMaterial\nDates\nRecordings\n\n\n\n\nIntroduction to Git and GitHub\nBasics of git commands, repository management, project management, and collaboration using GitHub\nLink\nMon 4/7\nTues 4/8\nMon 4/14\nTues 4/15\nMon 4/21\nTues 4/22\nMonday 4/7 (not available; issue with recording)\nTuesday 4/8 (Incomplete recording)\nMonday 4/14\nTuesday, 4/15\nMonday, 4/21\nTuesday, 4/22\n\n\nMarkdown and README files\nBecome familiar with markdown formatting for README files, issues, Pull Requests, and discussions on GitHub\nLink\nThurs 5/29\nTues 6/3\nThurs 5/29\nTues 6/3 (audio degradation issues)\n\n\nGitHub Pages\nHow to make a website from a GitHub repository using GitHub Pages\nLink\nThurs 6/12\nTues 6/17\nThurs 6/12 (not available; canceled session)\nTues 6/17\n\n\nForks\nForking a repository, how to work with forks, and why we use them\nLink\nThurs 6/26\nTues 7/1\nThurs 6/26\nTues 7/1\n\n\nBranches and Pull Requests\nCreating a branch, why to use branches, and using pull request to merge changes from branches\nLink\nThurs 7/10\nTues 7/15\nThurs 7/10\nTues 7/15 (not available; technical difficulties)\n\n\nGit Workflows\nUsing branches to organize and develop workflows in GitHub\nLink\nThurs 7/24\nTues 7/29\nThurs 7/24\nTues 7/29\n\n\nMerge Conflicts\nWhy merge conflicts occur, how to address them, and best practices to avoid them in the first place\nLink\nThurs 8/7\nTues 8/12\nThurs 8/7\n\n\nCommunicating in GitHub with Issues and Discussions\nWhen to use issues and discussions, types of issues, assigning issues, and using issue and discussion templates\nLink\nThurs 8/21\nTues 8/26\n\n\n\nProject Management\nUsing GitHub Issues and Projects for project management\nTBD\nThurs 9/4\nTues 9/9*\n\n\n\nAdvanced Git\nGit on the command line, advanced features and functions\nTBD\nThurs 9/18\nTues 9/23\n\n\n\nGitHub Actions\nAutomating tasks and workflows using GitHub Actions\nTBD\nThurs 10/1\nTues 10/6\n\n\n\n\n*Note: the Tuesday 9/9 session on Project Management has been moved to 9am PT/12pm ET",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Schedule"
    ]
  },
  {
    "objectID": "content/workflows/workflows.html#aims-and-objectives",
    "href": "content/workflows/workflows.html#aims-and-objectives",
    "title": "Workflows in Git and GitHub",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nDeveloping a project in Git and GitHub can be messy, especially when collaborating within a team. Overlapping commits can lead to merge conflicts and a convoluted commit history. Establishing a consistent branch-based workflow can help alleviate these concerns. This skills session will use directed, interactive lessons to provide NOAA Fisheries staff with a foundation in using branching strategies to streamline project development and tailor it to your team’s size and needs.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Workflows in Git and GitHub"
    ]
  },
  {
    "objectID": "content/workflows/workflows.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/workflows/workflows.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Workflows in Git and GitHub",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nGit workflows are based around the concept of branching. If you are not familiar with branches, be sure to take a look at our Branches and Pull Requests lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Workflows in Git and GitHub"
    ]
  },
  {
    "objectID": "content/workflows/workflows.html#git-workflows-for-development-and-collaboration",
    "href": "content/workflows/workflows.html#git-workflows-for-development-and-collaboration",
    "title": "Workflows in Git and GitHub",
    "section": "Git Workflows for Development and Collaboration",
    "text": "Git Workflows for Development and Collaboration",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Workflows in Git and GitHub"
    ]
  },
  {
    "objectID": "content/workflows/workflows.html#tutorial-practice-with-workflows",
    "href": "content/workflows/workflows.html#tutorial-practice-with-workflows",
    "title": "Workflows in Git and GitHub",
    "section": "Tutorial: Practice with Workflows",
    "text": "Tutorial: Practice with Workflows\nGitHub Skills: Create a release-based workflow\nWe’ll be using the Create a Release-based Workflow Skills Tutorial to practice using a GitHub Flow-style workflow with releases. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Start the course\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Start course” button to make a new repository on your account:\n\nWhen you open up the “Star” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the repository, and click the “Go to Exercise” button in the README\n\n\n\n\n\n\nTip\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs.\n\n\n\n\n\nStep 3: Follow the exercise\n\nCreate a beta release\nIn this exercise, we will be creating a release-based workflow that is built on the foundations of GitHub flow.\n\nGo to the Releases page for the repository. If you are in a condensed view mode, this link will be at the bottom of the Code page. If you’re viewing in a full-sized window, this page will be in the sidebar on the right-hand side of the repository window on the Code page.\n\nClick the green Create a new release button to start a new new release\n\nClick the Tag: Select tag dropdown, and specify a release number. Use v0.9 for this example. Click Create new tag: v0.9 on publish.\n\nGive the release a title, and an optional short description. Check the box next to Set as a pre-release.\n\nClick the green Publish release button to finalize your pre-release.\n\n\n\n\nIntroduce a bug to be fixed later\nNext, we’ll add a bug to our code that will be fixed later in this tutorial.\n\nAt the top of the repository, click on the Pull requests tab and click the green New button (if you’re in the full window view, this will say New pull request).\n\nSet the base: dropdown menu to release-v1.0 and the compare: dropdown menu to update-text-colors, and click the green Create pull request button.\nUpdate the pull request title to “Updated game text style”. Optionally add a more detailed description to your pull request. Click the green Create pull request button.\n\nMerge the pull request, wait about 20 seconds for the instructions to refresh, and refresh the instructions README page.\n\n\n\n\n\nAdd a new feature to the release branch\nWe’ll be using the release-v1.0 branch to add features to our repository. We can treat this branch as a long-lived but ephemeral branch in the spirit of GitHub Flow.\n\nIn the Code tab, create a new branch off of the main branch. This will be our “feature” branch. Name your branch feature-background.\n\nOpen the base.css file, and click the “edit this file” button (it should look like a pen in the upper right hand corner of the code chunk. Scroll down to line 109. In the body declaration, add a line that changes the background color to black using the background-color: black; line as shown in the tutorial.\n\nCommit your changes, updating the commit message to be more descriptive.\n\nNavigate to the Pull requests tab, and create a new pull request. Set the base branch to release-v1.0 and the compare branch to feature-background. Click the green Create pull request button, and fill in the pull request template. Click the Create pull request button to finalize the pull request.\n\nMerge the pull request and delete your feature branch.\n\nWait about 20 seconds for GitHub Actions to update, then refresh the instructions README page.\n\n\n\nOpen a release pull request\nOpening a pull request early in the release can help facilitate discussion about the release. Any commits added to the compare branch after opening the pull request will be associated with that pull request until it’s closed.\n\nIn the Pull requests tab, open a new pull request with base: main and compare: release-v1.0. You can do this from the “release-v1.0 had recent pushes” banner to save time.\n\nAdd some detail to your pull request body description, and click the green Create pull request button. Don’t merge your pull request yet!\n\nWait 20 seconds for GitHub Actions to update, then refresh the instructions README page.\n\n\n\nGenerate release notes and merge\nYou can generate release notes automatically based on the content of your pull request. Let’s practice this with our “Release v1.0” pull request.\n\nNavigate to the Releases page from the Code tab of your repository (see above if you need a reminder of how to get there).\nClick the Draft a new release button in the top right corner.\n\nIn the Tag: dropdown menu, type v1.0.0, and create a tag with that name. Change the Target: dropdown to select the release-v1.0 branch.\n\nClick the Generate release notes button at the top of the description box.\n\nReview your release notes and make any changes if necessary.\n\nSet the Target: branch back to main (we only needed the release branch to generate our release notes).\n\nClick the Save draft button (not the Publish release button; we’ll publish in the next step).\n\nOpen your Release v1.0 pull request on the Pull requests tab.\n\nMerge your pull request.\n\nWait 20 seconds for the GitHub Actions to update, then refresh the instructions page.\n\n\n\nAn aside on semantic versioning\nThis release workflow uses a system called semantic versioning, which is a convention for specifying compatibility. It uses a three-part version number: major version, minor version, and patch.\n\n\n\nFinalize the release\n\nFrom the Code page, navigate to the Releases page. Click the edit button next to your v1.0.0 release.\n\nEnsure the Target branch is set to main\n\nScroll to the bottom of the page, and click Publish release.\n\nWait 20 seconds for the GitHub actions to update, then refresh the instructions README page.\n\n\n\nCommit a hotfix to the release\nWe can make a short-lived, ephemeral branch to fix a bug. The tutorial has already introduced a bug (we did this in the first part of the tutorial), and created a feature branch (fix-game-background) and a hotfix release branch (hotfix-v1.0.1) for us that fixes the bug. Let’s make a pull request to introduce this bug fix into our repo.\n\nIn the Pull requests tab, open a pull request setting hotfix-v1.0.1 as the base branch and fix-game-background as the compare branch.\n\nAdd a description to the pull request body, and change the title of the pull request to “Hotfix for broken game style”. Create your pull request and merge it into our hotfix-v1.0.1 release branch.\n\nOpen a new pull request with main as the base branch and hotfix-v1.0.1 as the compare branch.\n\nAdd a detailed description to the pull request body.\n\nCreate and merge your pull request into the main branch.\n\nWait 20 seconds for GitHub Actions to update, then refresh the README.\n\n\n\nCreate release v1.0.1\nThe final step is incorporating our hotfix changes into a new release to distribute to the necessary channels.\n\nNavigate to the Releases page from the Code tab, and click the Draft a new release button.\n\nSet the Target branch to main and add a v1.0.1 tag to follow semantic versioning. Click Generate release notes to auto-populate the release title and notes. Review the release notes, and customize if desired.\n\nClick Publish release at the bottom of the page. Wait 20 more seconds for the tutorial README to update, then refresh the instructions.\n\nYou’re finished with the tutorial! Now that you have practiced with a release-based workflow, feel free to experiment with other workflows and select the one that works best for your project and team.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Workflows in Git and GitHub"
    ]
  },
  {
    "objectID": "content/issues/issues.html#aims-and-objectives",
    "href": "content/issues/issues.html#aims-and-objectives",
    "title": "Communicating in GitHub with Issues and Discussions",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nCommunication among developers and between developers and end users is a key aspect of GitHub that promotes collaboration and open source development. GitHub provides a number of tools and features to facilitate communication. Two of these features, GitHub Issues and GitHub Discussions, allow collaborators to create, discuss, and track work in a repository. This skills session will use directed, interactive lessons to provide NOAA Fisheries staff with a foundation in using Issues and Discussions to promote open source development in GitHub.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Communicating in GitHub with Issues and Discussions"
    ]
  },
  {
    "objectID": "content/issues/issues.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/issues/issues.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Communicating in GitHub with Issues and Discussions",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.\nWe will also be using a bit of Markdown, so you may want to refresh yourself on Markdown language with our Introduction to Markdown lesson.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Communicating in GitHub with Issues and Discussions"
    ]
  },
  {
    "objectID": "content/issues/issues.html#github-issues-and-discussions-for-project-development",
    "href": "content/issues/issues.html#github-issues-and-discussions-for-project-development",
    "title": "Communicating in GitHub with Issues and Discussions",
    "section": "GitHub Issues and Discussions for Project Development",
    "text": "GitHub Issues and Discussions for Project Development",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Communicating in GitHub with Issues and Discussions"
    ]
  },
  {
    "objectID": "content/issues/issues.html#tutorial-working-with-issues-and-discussions",
    "href": "content/issues/issues.html#tutorial-working-with-issues-and-discussions",
    "title": "Communicating in GitHub with Issues and Discussions",
    "section": "Tutorial: Working with issues and discussions",
    "text": "Tutorial: Working with issues and discussions\nFor this tutorial, we’re going to be forking a demo repository (https://github.com/nmfs-opensci/GitHub-Clinic-demos), enabling Issues and Discussion on our repository, and adding an issue and a discussion to the repository. Follow along on your own account.\n\nStep 1: Fork the repository\n\n\n\n\n\n\nIf you have already forked this repository for a previous session, you can skip this step.\n\n\n\nWe have used this demo repository for previous GitHub Clinic demonstrations and tutorials, so you may already have a forked copy of this repository on your account. If you are unsure, you can search for [your-username]/GitHub-Clinic-demos in the GitHub search bar.\n\n\n\nOpen the demo repository in GitHub.\n\nAt the top of the repository, click the Fork button.\n\nKeep everything default (your account should be listed under Owner, and the Repository name should be pre-filled for you). Click the green Create Fork button.\n\n\n\n\nStep 2: Enable Issues and Discussions\nWhen you create your new fork, you may notice that the Issues and Discussions tabs that you normally see at the top of the repository are not there. We have to enable these in the repository settings.\n\nNavigate to the Settings tab in your forked repository.\n\nOn the main settings page, scroll down to the Features section, and select the checkboxes next to Issues and Discussions.\n\nNote that the top menu bar for your repository now has the Issues and Discussions tabs added.\n\n\n\n\nStep 3: Set up a template issue\n\nRefresh the settings page, and in the same Features section, click the green Set up templates button under Issues.\n\nUnder the dropdown menu for Add template, select Bug report to add a Bug report template to your available templates.\n\nClick the Preview and edit button to see what your issue template looks like in Markdown\n\nLet’s go ahead and edit the template to take out the part about smartphone specifications. Click the edit button at the top next to “Issue: Bug report” (it looks like a little pencil).\n\nIn the Template content section, scroll down to the “Smartphone” section, and delete everything from that section.\n\nClick the “x” at the top of the editing pane to save your changes, then click the Close preview button. Click the green Propose changes button to create a commit that will add your new template to your repository.\n\nNote that you now have a new subfolder in your repository under the .github folder called ISSUE_TEMPLATE. If you navigate to that folder in your repository, you can see our newly created bug_report.md template. If we ever want to make more edits to our template, we can either use the template editor interface in the Settings menu, or we can directly edit these files in our repository.\n\n\n\n\nStep 4: Create an issue\n\nNavigate to the Issues tab in your repository, and click the green New issue button.\n\nLet’s use the new template that we created. Click the Bug report option in the menu.\n\nGive your issue a title and fill in the template with a fake “bug”. Note that you can directly paste in an image from your clipboard (GitHub converts it to a permalink when you paste it into Markdown). Click the green Create button to submit your issue.\n\nLet’s add a label to our Issue to show that it’s a bug report. On the left-hand side of the issue, click the “Labels” section and select “bug”.\n\n\n\n\nStep 5: Start a discussion\nOur bug report has spawned some discussion among the developers! Let’s document this discussion in our repository.\n\nNavigate to the Discussions tab in your repository, and click New Discussion.\n\nLet’s make this a general discussion. Click the green Get started button in the area next to General.\n\nAdd a title and a body to your discussion thread. We can reference the issue that we created earlier using the # key.\n\nClick the green Start discussion button to save your discussion thread.\n\nCongratulations! You have now added both an Issue and a Discussion topic to your repository. Feel free to play around with other Issues templates and Discussion types on your own.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Communicating in GitHub with Issues and Discussions"
    ]
  }
]