[
  {
    "objectID": "schedule.html",
    "href": "schedule.html",
    "title": "Schedule",
    "section": "",
    "text": "Introductory workshops will be given Mondays at 10am PT/1pm ET and Tuesdays at 1pm PT/4pm ET for 3 weeks starting April 7th.\nSingle-topic sessions will be given Thursdays at 12:30pm PT/3:30pm ET and Tuesdays at 11:00am PT/2:00pm ET, with topics switching every two weeks.\nSee the Open Science Calendar for meeting links. Note that recordings and calendar links are restricted to NOAA employees and affiliates.\n\n\n\n\n\n\n\n\n\n\nTopic\nDescription\nMaterial\nDates\nRecordings\n\n\n\n\nIntroduction to Git and GitHub\nBasics of git commands, repository management, project management, and collaboration using GitHub\nLink\nMon 4/7\nTues 4/8\nMon 4/14\nTues 4/15\nMon 4/21\nTues 4/22\nMonday 4/7 (not available; issue with recording)\nTuesday 4/8 (Incomplete recording)\nMonday 4/14\nTuesday, 4/15\nMonday, 4/21\nTuesday, 4/22\n\n\nMarkdown and README files\nBecome familiar with markdown formatting for README files, issues, Pull Requests, and discussions on GitHub\nLink\nThurs 5/29*\nTues 6/3\nThurs 5/29\n\n\nGitHub Pages\nHow to make a website from a GitHub repository using GitHub Pages\nTBD\nThurs 6/12\nTues 6/17\n\n\n\nForks\nForking a repository, how to work with forks, and why we use them\nTBD\nThurs 6/26\nTues 7/1\n\n\n\nBranches and Pull Requests\nCreating a branch, why to use branches, and using pull request to merge changes from branches\nTBD\nThurs 7/10\nTues 7/15\n\n\n\nGit Workflows\nUsing branches to organize and develop workflows in GitHub\nTBD\nThurs 8/7\nTues 8/12\n\n\n\nMerge Conflicts\nWhy merge conflicts occur, how to address them, and best practices to avoid them in the first place\nTBD\nThurs 7/17\nTues 7/29\n\n\n\nIssues\nTypes of issues, assigning issues, and using issue templates\nTBD\nThurs 8/21\nTues 8/26\n\n\n\nProject Management\nUsing GitHub Issues and Projects for project management\nTBD\nThurs 9/4\nTues 9/9\n\n\n\nAdvanced Git\nGit on the command line, advanced features and functions\nTBD\nThurs 9/18\nTues 9/23\n\n\n\nGitHub Actions\nAutomating tasks and workflows using GitHub Actions\nTBD\nThurs 10/1\nTues 10/6\n\n\n\n\nNote: the Thursday 5/29 session has been shifted to 1:00pm PT/4:00pm ET to accommodate the NOAA Fisheries all-hands meeting.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Schedule"
    ]
  },
  {
    "objectID": "content/setup/setup.html#setting-up-git-and-github",
    "href": "content/setup/setup.html#setting-up-git-and-github",
    "title": "Setup",
    "section": "Setting up Git and GitHub",
    "text": "Setting up Git and GitHub\n\nCreate a GitHub account\nInstall GitHub Desktop - Note that this will also install Git on your machine\nRequest access to NMFS GitHub Enterprise Cloud (NMFS staff and affiliates only)\n\nDownload the NMFS GitHub Enterprise Cloud user agreement\nUse this Google form to request access to Enterprise\nWait for follow-up email and confirm you’re a member (if you see a 404 page you haven’t been added yet)\n\nLog into GitHub and GitHub Desktop using your GitHub account credentials",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#signing-up-for-github-enterprise-cloud-ghec",
    "href": "content/setup/setup.html#signing-up-for-github-enterprise-cloud-ghec",
    "title": "Setup",
    "section": "Signing up for GitHub Enterprise Cloud (GHEC)",
    "text": "Signing up for GitHub Enterprise Cloud (GHEC)\n\nFollow the instructions on the GGT website to request access.\nWait to be invited to GHEC and accept\nThen you can sign in to an org like https://github.com/noaa-nwfsc with CAC or password+authentication",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec",
    "href": "content/setup/setup.html#authenticating-to-ghec",
    "title": "Setup",
    "section": "Authenticating to GHEC",
    "text": "Authenticating to GHEC\n\nUsing GitHub Desktop\n\nGo to GitHub Desktop &gt; Settings &gt; Accounts\nSign into GitHub.com. Ignore GitHub Enterprise!!\nDONE!",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-1",
    "href": "content/setup/setup.html#authenticating-to-ghec-1",
    "title": "Setup",
    "section": "Authenticating to GHEC",
    "text": "Authenticating to GHEC\n\nUsing GitHub Desktop\n\nHelp! I signed up for GitHub Enterprise and GitHub Desktop will not authenticate!! Log out of GitHub Desktop under GitHub Desktop &gt; Settings (or Options) &gt; Account and log back in.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nTell RStudio about Git\n\nIn RStudio, Tools &gt; Terminal &gt; New Terminal\nAt the command line (in the new terminal), type which git if on a Mac and where git if in Windows.\nCopy that path.\nIn RStudio, Tools &gt; Global Options &gt; Git/SVN There is a box at top that asks for the location of the Git binary.\nPaste that path in.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-1",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-1",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\nYou have to authenticate to GitHub separately for RStudio even if you are signed in on GitHub Desktop.\nIf you see anything like this, you have not authenticated.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-2",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-2",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nSet up\n\nInstall usethis R package\nRun this code:\n\nusethis::use_git_config(user.name = \"your username\", user.email = \"you@noaa.gov\")",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-3",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-3",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nCreate Token\nusethis::create_github_token(   scopes = c(\"repo\", \"workflow\"),   description = \"DESCRIBE THE TOKEN'S USE CASE\",   host = NULL )",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-4",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-4",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nCreate Token\n\nSet the date when the token will expire.\nScroll to bottom and click “Generate token”\nCopy the long PAT.",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-5",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-5",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nConfigure PAT for GHEC\n\nNext to the PAT, you will see “Configure for SSO”.\nClick that and authenticate to your GHEC org",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-6",
    "href": "content/setup/setup.html#authenticating-to-ghec-using-rstudio-6",
    "title": "Setup",
    "section": "Authenticating to GHEC: Using RStudio",
    "text": "Authenticating to GHEC: Using RStudio\n\nTell RSTudio about the PAT\nRun this code.\ncredentials::set_github_pat(\"THE LONG PAT)",
    "crumbs": [
      "JupyterHub",
      "Welcome",
      "Setup"
    ]
  },
  {
    "objectID": "content/markdown/markdown-legacy.html#using-markdown-in-github---tutorial",
    "href": "content/markdown/markdown-legacy.html#using-markdown-in-github---tutorial",
    "title": "Introduction to Markdown and README files",
    "section": "Using Markdown in GitHub - Tutorial",
    "text": "Using Markdown in GitHub - Tutorial\n\n\n\n\n\n\nImportant\n\n\n\nGitHub Skills are systematically being updated to an issue-based workflow from the legacy README-based workflow. If you began this exercise before 5-30-2025, your skills repository will look different from the current skills repository template. The following tutorial follows the legacy README-based workflow.\n\n\nGitHub Skills: Communicate using markdown\nWe’ll be using the Communicate Using Markdown Skills Tutorial to get some practice with markdown in GitHub. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Start Course” button to make a new repository on your account:\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the instructions page. You’ll notice that the README output has changed to show the steps for the tutorial:\n\n\n\n\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\n\n\n\n\nStep 3: Follow the exercise\n\nOpen a pull request\nCreate a new pull request following the instructions in the tutorial: \nOpen a new window and navigate to the Pull Requests tab in GitHub, then click the green New button to open a new Pull Request:\n\nClick the “compare” dropdown and select “start-markdown”\n\nMake sure the green “Able to merge” message shows, and click “Create pull request”, then “Create pull request” again.\n\nNavigate to the “Files changed” tab after the pull request has been created\n\nScroll to the bottom of the page to the index.md file, click the three dots, and select “Edit file”\n\nAdd a first-level header by entering # followed by a space in the Edit textbox. You can play around with adding other levels of headers.\n\nClick the “Preview” button above the dialogue box to see what your headers will look like in your file.\n\nClick the “Commit changes” button at the top of your file (note that this is different from the instructions from GitHub Skills). Add a meaningful message, and click the Commit changes button.\n\n\n\nWait 20 seconds for GitHub Actions to run in the background, then refresh the instructions page.\n\n\n\n\nAdd an image\nWhen you committed the changes, GitHub should have taken you back to the bottom of the “Files changed” page. If not, navigate to this pane and scroll to the bottom, click the three dots, and click the “Edit file” option again.\n\nIn the file, add a markdown image. For this example, we can use our SCUBAtocat.\n\nClick the Preview tab to check your Markdown formatting \nCommit your changes, and wait another 20 seconds for GitHub actions to update to the next step.\n\n\n\nAdd a code example\nEdit the index.md file again.\n\nAdd some code in a code block (you can use either example in the instructions)\n\nPreview your code block.\n\nCommit your changes to the file, and wait another 20 seconds before refreshing the instructions page.\n\n\n\nAdd a task list\nEdit the index.md file again.\n\nMake a markdown task list using the - [] notation\n\nPreview your task list.\n\nCommit your changes to the file, and wait another 20 seconds before refreshing the instructions page.\n\n\n\nMerge the pull request\nClick the Conversation tab in your pull request\n\nScroll to the bottom of the page, click “Merge pull request”, and confirm the merge. Wait 20 more seconds, then refresh the instructions page to finish the course."
  },
  {
    "objectID": "content/markdown/markdown-legacy.html#what-about-readme-files",
    "href": "content/markdown/markdown-legacy.html#what-about-readme-files",
    "title": "Introduction to Markdown and README files",
    "section": "What about README files?",
    "text": "What about README files?\nAll of the things we did in this tutorial can be done in a README file! To illustrate this, we can copy the contents of your index.md file over to your README.md file in your Skills repository:"
  },
  {
    "objectID": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project",
    "href": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project",
    "title": "Putting Everything Together",
    "section": "Practice creating a repository for your own project",
    "text": "Practice creating a repository for your own project\n\nOpen GitHub Desktop\nLogin with your GitHub account (if you have not already done so)\nCreate a new repository\nMove your code and other project files into your new repository\nMake a commit with your initial files\nPush your commit up to GitHub"
  },
  {
    "objectID": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project-1",
    "href": "content/inperson/guided_exercise.html#practice-creating-a-repository-for-your-own-project-1",
    "title": "Putting Everything Together",
    "section": "Practice creating a repository for your own project",
    "text": "Practice creating a repository for your own project\n\nOpen the repository in your browser\nAdd your teammates as collaborators\nCreate an issue and tag a teammate\nMake a change to the README and commit in a new branch\nCreate a pull request\nMerge the pull request into your main branch"
  },
  {
    "objectID": "content/inperson/cb_genetics.html",
    "href": "content/inperson/cb_genetics.html",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#aims-and-objectives",
    "href": "content/inperson/cb_genetics.html#aims-and-objectives",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nThis sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff within the Conservation Biology Genetics and Evolution Program with the knowledge required for basic repository management using Git commands, collaboration, and project management, as well as dedicated time to put these skills to use in setting up an existing project or workflow with Git and GitHub.",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#agenda",
    "href": "content/inperson/cb_genetics.html#agenda",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Agenda",
    "text": "Agenda\n\n10:00-10:10 Why Git/GitHub?\n10:10-10:20 GitHub Enterprise\n10:20-10:50 Introduction to GitHub - Tutorial\n10:50-11:30 Pull Requests and Collaboration - Tutorial\n11:30-11:45 Break\n11:45-12:15 Project Management\n12:15-13:00 Putting Everything Together",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#why-gitgithub",
    "href": "content/inperson/cb_genetics.html#why-gitgithub",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Why Git/GitHub?",
    "text": "Why Git/GitHub?",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#github-enterprise",
    "href": "content/inperson/cb_genetics.html#github-enterprise",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "GitHub Enterprise",
    "text": "GitHub Enterprise",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#introduction-to-github---tutorial",
    "href": "content/inperson/cb_genetics.html#introduction-to-github---tutorial",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Introduction to GitHub - Tutorial",
    "text": "Introduction to GitHub - Tutorial\nGitHub Skills - Introduction to GitHub",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#pull-requests-and-collaboration---tutorial",
    "href": "content/inperson/cb_genetics.html#pull-requests-and-collaboration---tutorial",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Pull Requests and Collaboration - Tutorial",
    "text": "Pull Requests and Collaboration - Tutorial\nGitHub Skills - Review Pull Requests\nGitHub Skills - Resolve Merge Conflicts",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#project-management",
    "href": "content/inperson/cb_genetics.html#project-management",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Project Management",
    "text": "Project Management",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/inperson/cb_genetics.html#putting-everything-together",
    "href": "content/inperson/cb_genetics.html#putting-everything-together",
    "title": "GitHub Workshop for CB Genetics and Evolution Program",
    "section": "Putting Everything Together",
    "text": "Putting Everything Together",
    "crumbs": [
      "JupyterHub",
      "In-Person Workshops",
      "GitHub Workshop for CB Genetics and Evolution Program"
    ]
  },
  {
    "objectID": "content/intro/intro.html",
    "href": "content/intro/intro.html",
    "title": "Introduction to Git and GitHub",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#aims-and-objectives",
    "href": "content/intro/intro.html#aims-and-objectives",
    "title": "Introduction to Git and GitHub",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nThis introduction to Git and GitHub virtual workshop will be repeated twice weekly for three weeks. These sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with the knowledge required for basic repository management using Git commands, collaboration, and project management.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/intro/intro.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Introduction to Git and GitHub",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\n\nCreate a GitHub account\nInstall GitHub Desktop - Note that this will also install Git on your machine\nRequest access to NMFS GitHub Enterprise Cloud (NMFS staff and affiliates only)\n\nDownload the NMFS GitHub Enterprise Cloud user agreement\nUse this Google form to request access to Enterprise\nWait for follow-up email and confirm you’re a member (if you see a 404 page you haven’t been added yet)\n\nLog into GitHub and GitHub Desktop using your GitHub account credentials",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#why-gitgithub",
    "href": "content/intro/intro.html#why-gitgithub",
    "title": "Introduction to Git and GitHub",
    "section": "Why Git/GitHub?",
    "text": "Why Git/GitHub?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#github-enterprise",
    "href": "content/intro/intro.html#github-enterprise",
    "title": "Introduction to Git and GitHub",
    "section": "GitHub Enterprise",
    "text": "GitHub Enterprise",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#git-and-github-the-basics",
    "href": "content/intro/intro.html#git-and-github-the-basics",
    "title": "Introduction to Git and GitHub",
    "section": "Git and GitHub: The basics",
    "text": "Git and GitHub: The basics",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#introduction-to-github---tutorial",
    "href": "content/intro/intro.html#introduction-to-github---tutorial",
    "title": "Introduction to Git and GitHub",
    "section": "Introduction to GitHub - Tutorial",
    "text": "Introduction to GitHub - Tutorial\nGitHub Skills - Introduction to GitHub\nWe’ll be using the Introduction to GitHub Skills Tutorial to get our feet wet with Git and GitHub. Follow along with the tutorial using your personal GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Copy Exercise” button to make a new repository on your account:\n\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button: \n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the instructions page. You’ll notice that the “Copy Exercise” button has switched from green to gray, and the “Start Exercise” button has switched from gray to green.\nRight click the “Start Exercise” button and open it in a new tab. This will open an Issue for this repository that will serve as the instructions for the exercise.\n\n\n\n\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\n\n\n\n\nStep 3: Follow the exercise\n\nCreate a new branch\nCreate a new branch following the instructions in the tutorial:\n\n\n\n\n\n\n\nIf you have the instructions open in side-by-side mode, you may notice that the github-actions bot will be producing new comments in the instructions.\n\n\n\nBe sure to wait until the bot is finished before starting the next part of the exercise!\n\n\n\n\nCreate a commit with a new file\nClick the “Add file” button to create a new file named PROFILE.md\n\n\n\n\n\n\n\nIf you’ve arranged your screen in a side-by-side mode, the “Add file” button may look a bit different!\n\n\n\nGitHub dynamically shortens certain buttons and tabs based on the size of the window. In this case, the “Add file” button becomes the “+” button:\n\n\n\nAdd a line to the new file, and click the “Commit changes” green button:\n\nChange the “Commit message” to “Add PROFILE.md” and click “Commit changes” to confirm the commit\n\n\n\nOpen a pull request\nRefresh the repository and click the “Compare & pull request” button.\n\nEdit the title field to read “Add my first file”, and provide a brief description of your pull request. Click “Create pull request”\n\n\n\n\n\n\n\nYou can follow the progress of the GitHub Actions running in the background after this step!\n\n\n\n\n\n\n\n\nMerge the pull request\nClick the green “Merge pull request” button, and confirm the merge. Delete the branch after merging (don’t worry, you can always restore a deleted branch)",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#working-in-github-desktop---tutorial",
    "href": "content/intro/intro.html#working-in-github-desktop---tutorial",
    "title": "Introduction to Git and GitHub",
    "section": "Working in GitHub Desktop - Tutorial",
    "text": "Working in GitHub Desktop - Tutorial\nTo get a bit more experience working with GitHub repositories, we are going to clone our tutorial repository, create a repository in GitHub Desktop, make a commit, and push our changes up to GitHub.\n\nStep 1: Log into GitHub\nIf this is your first time using GitHub Desktop, you will need to log in to your GitHub account. Open a browser window to GitHub, and make sure you’re logged in to your GitHub account. If you are on the NMFS GitHub Enterprise Cloud, you will also need to be logged in using SSO.\n\n\nStep 2: Open GitHub Desktop and clone a repository\nOn your local computer, open GitHub Desktop. Click “Clone a repository from the Internet…”\n\nClick “Sign in” and “Continue with browser” to open a browser window and sign into GitHub Desktop.\n\n\n\n\n\n\nWhen logging into GitHub Desktop for the first time, you will be presented with a tabbed window as shown below. To access GitHub Enterprise, do not use the Enterprise tab on the login window! This is for a locally-hosted GitHub Enterprise server. The NMFS GitHub Enterprise is cloud-hosted, so to access enterprise repositories from GitHub Desktop, you will need to be logged into the enterprise (via SSO) through your browser.\n\n\n\n\n\n\nEnter the name of the GitHub Skills repository we just finished (skills-introduction-to-github) into the search box. Select the repository, choose where to clone the repository to on your local machine, and click “Clone”.\n\n\n\n\n\n\n\nWhere should you clone your repository to?\n\n\n\nFor transient repositories (i.e., repositories that you only plan to work on briefly or occasionally), I suggest creating a folder on your local file system just for these GitHub repositories. If you’re working on a project and already have a file folder structure for that project, you can clone and/or create your repository inside the existing folder structure.\n\n\n\n\nStep 3: Create a new repository\nClick the dropdown where it says “Current repository” in the upper left corner of GitHub Desktop. This will bring up a list of your repositories available on your local machine. For those who are new to GitHub Desktop, this should only include our GitHub Skills repository. Click the “Add” dropdown menu, and click “Create new repository…”\n\nThere are several aspects of a repository you will need to keep in mind when creating a new one from scratch:\n\nName: Make your name distinct and descriptive, but not too long. Don’t use spaces (remember, this will be included as part of the URL). Git and GitHub repositories often use kebab case.\nDescription:Add a brief description to your repository that describes its purpose\nLocal path: Similarly to when you clone a repository into a folder, you need to tell GitHub Desktop where to start a new repository. This will autofill to the directory you specified when installing GitHub Desktop for the first time, but you are welcome to change it to wherever you want your repository stored on your local computer. You can always move a repository after creation.\nREADME file: It is always a good idea to initialize the repository with a README file. This file will serve as the “front page” of your repository on GitHub. You can add a more detailed description of the repository, what it will be used for, instructions for how it should be used by others, etc. If your repository contains datasets, you can also use the README to add metadata. See this link for more information on README files.\nGit ignore: A .gitignore file tells Git what files and folders to not track. These files will still reside on your local repository, but will not be included in a Commit action or accessible on GitHub. Typically, these files are system files for the coding language or IDE you’re using, but can also include files that you don’t want to be shown on GitHub. This may include things like data files that are too big or too sensitive to be hosted on GitHub, code files that include sensitive material, and scratch or intermediate files. When creating a new repository, you can choose to pre-populate the .gitignore file based on the primary coding language you expect to use most in the repository.\nLicense: Any public-hosted GitHub repository should contain a license for open source use. The latest NOAA recommendation is to use Apache License 2.0\n\nGo ahead and fill in the fields and Create your repository.\n\n\n\nStep 4: Publish your repository to GitHub\nAfter creating your repository, GitHub Desktop will open it automatically. However, at this point your repository is only available on your local machine. Go ahead and click the button to publish your repository to GitHub.\n\nYou can choose whether to keep your repository private or let it be viewed by the public. You can also choose to publish the repo to your personal account, or to an organization (e.g., your center’s Enterprise account). In general, for the sake of open science we normally suggest keeping a repository public unless it contains sensitive or proprietary data. For now, we’ll keep this practice repo public.\n\n\n\nStep 5: Modify the README file in your repository\nYou can now open your repository in an editor or IDE (e.g., RStudio), show the files in a file explorer window, or view the repository on GitHub. We will take advantage of the ability to open the repo in the editor to make a change to our repository’s README file.\nOpen your repository in whatever editor you choose (I have mine configured to use RStudio) by clicking the button in GitHub Desktop.\n\nIn your editor, open the README.md file. You will notice that the README file is prepopulated with the title of your repository as a first-level header and your brief description. Make a change to your README file (maybe change the title and add a bit more context to the description), and save your changes. Close your editing program.\n\n\n\nStep 5: Commit your changes\nIn GitHub Desktop, you will notice that the README.md file has now been added to the “Changed files” list on the left-hand side, and the changes are shown in the main pane as a series of deletions and additions. The check-marks indicate that those changes are staged and should be included in the commit. If you change your mind and don’t want a change to be committed, you can click the check mark and it will change to an “unstaged” state. For now, leave all changes staged.\n\nIn the bottom left, you will see a box for your commit message and a description. These allow you to describe the changes made in a particular commit. A more descriptive message can help others (and future you) to understand why you made a particular change. GitHub Desktop will prepopulate the message field if you’re only modifying one file, but it’s often a good idea to change this to something more descriptive. You can go into more details in the description field if necessary, but this is optional.\nChange your commit file, and commit to the “main” branch.\n\n\n\nStep 6: Push your commit to GitHub\nAfter you commit your changes, GitHub Desktop will prompt you to “Push commits to the origin remote”. This is how we will get our local changes up on GitHub. Click the “Push origin” button.\n\nOpen the repository in GitHub in your browser to see what the changes we made to our README look like on GitHub.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/intro/intro.html#project-management",
    "href": "content/intro/intro.html#project-management",
    "title": "Introduction to Git and GitHub",
    "section": "Project Management",
    "text": "Project Management",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Git and GitHub"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#aims-and-objectives",
    "href": "content/markdown/markdown.html#aims-and-objectives",
    "title": "Introduction to Markdown and README files",
    "section": "Aims and Objectives",
    "text": "Aims and Objectives\nMarkdown is a lightweight markup language that you can use to add formatting elements to plain-text text documents. GitHub uses markdown for a variety of applications across repositories and projects, including for README files, issues, discussions, commit messages, and comments. This Introduction to Markdown skills session will use a a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with a foundation in markdown language formatting and editing.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "href": "content/markdown/markdown.html#prerequisites-what-do-i-need-before-this-workshop-to-follow-along-on-my-own",
    "title": "Introduction to Markdown and README files",
    "section": "Prerequisites: What do I need before this workshop to follow along on my own?",
    "text": "Prerequisites: What do I need before this workshop to follow along on my own?\nThis stand-alone skills session is meant for those with a basic understanding of Git and GitHub. Check out our Introduction to Git and GitHub lessons if you are new to Git and GitHub or need a refresher.",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#what-is-markdown",
    "href": "content/markdown/markdown.html#what-is-markdown",
    "title": "Introduction to Markdown and README files",
    "section": "What is Markdown?",
    "text": "What is Markdown?",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#using-markdown-in-github---tutorial",
    "href": "content/markdown/markdown.html#using-markdown-in-github---tutorial",
    "title": "Introduction to Markdown and README files",
    "section": "Using Markdown in GitHub - Tutorial",
    "text": "Using Markdown in GitHub - Tutorial\n\n\n\n\n\n\nImportant\n\n\n\nGitHub Skills are systematically being updated to an issue-based workflow from the legacy README-based workflow. The following tutorial follows the updated issue-based workflow. If you began this exercise before 5-30-2025, your skills repository will look different from the current skills repository template. If this is the case, click here for the legacy README-based tutorial.\n\n\nGitHub Skills: Communicate using markdown\nWe’ll be using the Communicate Using Markdown Skills Tutorial to get some practice with markdown in GitHub. Follow along with the tutorial using your own GitHub account.\n\nStep 1: Copy the exercise\nOpen the GitHub Skills link, and make sure you are logged into GitHub. Use the “Copy Exercise” button to make a new repository on your account:\nWhen you open up the “Copy Exercise” link, you will be presented with the “Create a new repository” interface. Keep all of the defaults, and click the green “Create repository” button:\n\n\n\n\n\n\n\nGitHub Skills tutorials use GitHub Actions in the background.\n\n\n\nThese actions use “minutes”, which are limited in a private repository, but unlimited in a public one. We suggest keeping your GitHub Skills tutorial repositories public to avoid any minutes limitations.\n\n\n\n\n\n\n\n\nYou’ll notice that most steps in a GitHub Skills tutorial feature a message to wait about 20 seconds for the exercise to update.\n\n\n\nGitHub Actions can take a little bit of time to run, so waiting this requisite time is important! Refresh the instructions after 20 seconds to make sure everything updates properly.\n\n\n\n\nStep 2: Start the exercise\nAfter waiting the suggested 20 seconds, refresh the repository, and click the “Go to Exercise” button in the README\n\n\n\n\n\n\n\nTip\n\n\n\nI suggest moving the instructions tab into another window so you can work side-by-side with the instructions to limit switching back and forth between tabs. \n\n\n\n\nStep 3: Follow the exercise\n\nCreate a markdown file in a new branch\nIn this exercise, we will be using markdown to create an example “blog” page. The content provided in the exercise is just an example; we can give a more personal touch to our own content.\n\n\n\n\n\n\nTip\n\n\n\nDuring this tutorial, GitHub Skills will provide code blocks that you can copy directly to your clipboard to paste into the body of your Markdown document. But this defeats the purpose of getting practice with Markdown and building that muscle memory! Go ahead and type in your own content (don’t worry, it doesn’t have to match the example content perfectly)\n\n\n\nOn the Code tab of your repository, click the dropdown menu where it says “main”\n\nIn the “Find or create a branch” box, type start-blog and select “Create branch start-blog from main”\n\nCreate a new file by clicking the “Add file” button in your new branch (note this may look like a + symbol if you’re working in a condensed side-by-side view) and click “Create new file”\n\nAlong the top of the dialogue box, name your file day-1.md\n\nIn your new file, create a level one heading to give the page a title\n\nAdd a couple level 2 headings for the names of each of the blog posts\n\nClick the Preview tab in the top left of the dialogue box to view your rendered content\n\nClick the “Commit changes” button in the top right and commit the changes directly to the start-blog branch\n\n\n\n\nMake a list\n\nRe-open the day-1.md file and click “Edit this file”\n\nIn the ## Morning Planning section, add a list of each type: unordered, ordered, and task\n\n\n\n\n\n\n\n\nNote\n\n\n\nGitHub skills only asks for a task list, but we want you to have practice with all list types; adding the other types will not mess up the GitHub Skills workflow, so go ahead and practice adding all three types!\n\n\n\nPreview your content in the preview tab\n\nCommit your changes directly to the start-blog branch\n\n\n\n\nAdd a code sample\n\nAfter this commit, the day-1.md file should still be open. Click the “Edit this content” button to go back into editing mode\n\nIn the “Review” section, add a code chunk using the three backtick notation (it’s okay to use a different example than the one provided by GitHub Skills)\n\nPreview your content\n\nCommit your changes to the start-blog branch\n\n\n\n\nAdd an image\n\nOpen our day-1.md file in edit mode\n\nInsert an image below the the “Morning Planning” level 2 heading. To make things a little more interesting, let’s use the Scubatocat image located at https://octodex.github.com/images/scubatocat.png\n\nPreview your Markdown file\n\nGo back to the Edit tab and replace the image with an HTML version that changes the size and position\n\nPreview your updated image, and Commit changes to start-blog\n\n\n\nAdd some formatted text (off-script)\nBefore we finish up our tutorial, let’s add some formatted text. The GitHub Skills lesson does not mention anything about this, but it’s an important part of markdown that you should get some practice with!\n\nEdit your day-1.md file one more time\n\nUnder the Daily Learning heading, add some bolded, italicized, and in-line code text\n\nPreview your file, then commit your changes\n\n\n\n\nFinish work: Merge your blog post\nThis step doesn’t have anything to do with markdown, but it’s good practice for working with Pull Requests from a branch!\n\nSelect the “Pull requests” tab in the top navigation bar\n\nClick the “Compare & pull request” button for start-blog\n\nClick the “Create pull request button”\n\nMerge your pull request and confirm the merge",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "content/markdown/markdown.html#what-about-readme-files",
    "href": "content/markdown/markdown.html#what-about-readme-files",
    "title": "Introduction to Markdown and README files",
    "section": "What about README files?",
    "text": "What about README files?\nAll of the things we did in this tutorial can be done in a README file! To illustrate this, we can copy the contents of our day-1.md file over to our README.md file in our Skills repository:\n\nNavigate to the Code tab in the top navigation menu\n\nSelect day-1.md and switch to the Code view\n\nClick the “Copy raw file” button at the top of the dialogue box (looks like two overlapping squares)\n\nNavigate back to the Code tab, and edit the README file by clicking the “Edit file” button on the README\n\nReplace the text in the dialogue box with the copied text from the day-1.md file\n\nCommit your changes\n\nNavigate back to the Code tab (this should bring you to the home page of our repository, and scroll down to see your markdown-formatted README file!",
    "crumbs": [
      "JupyterHub",
      "Tutorials",
      "Introduction to Markdown and README files"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "NOAA Fisheries GitHub Clinic",
    "section": "",
    "text": "GitHub is an important platform for many NOAA Fisheries staff and teams to share and collaborate. In 2023, an Authorization To Use for GitHub Enterprise Cloud was signed, which provides a secure, private, access-controlled and managed platform for staff. In 2024, the GitHub Governance Team (GGT) provided a series of workshops to onboard NOAA Fisheries scientists to GitHub Enterprise and provide training in the use of Git and GitHub for NOAA Fisheries. In 2025, NMFS Open Science will be leading a second iteration of these workshops to provide NOAA Fisheries staff with the necessary skills to effectively incorporate Git and GitHub into existing workflows.\nThe GGT has outlined several use cases for why you may want to incorporate Git and GitHub into your workflows:",
    "crumbs": [
      "JupyterHub",
      "Welcome"
    ]
  },
  {
    "objectID": "index.html#aims-and-objectives-of-the-github-clinic",
    "href": "index.html#aims-and-objectives-of-the-github-clinic",
    "title": "NOAA Fisheries GitHub Clinic",
    "section": "Aims and Objectives of the GitHub Clinic",
    "text": "Aims and Objectives of the GitHub Clinic\nThe GitHub Clinic will consist of several components:\n\nAn introductory 2-hour introduction to Git and GitHub virtual workshop, repeated twice weekly for three weeks. These sessions will use a mixture of directed, interactive lessons and GitHub Skills to provide NOAA Fisheries staff with the knowledge required for basic repository management using Git commands, collaboration, and project management\nA series of 1-hour standalone skills workshops for deeper dives into several GitHub features including advanced branch management, Git workflows, GitHub pages, and forking\nOpen Science Office Hours for individual help and coaching\n\n\nSchedule\nSee the schedule page.\n\nIntro workshops will be given Mondays at 10am PT/1pm ET and Tuesdays at 1pm PT/4pm ET for 3 weeks starting April 7th\n\nThese are 2 hour introductory sessions to get you started with Git and GitHub\nIntro sessions are identical; attend any that works for your schedule, or repeat sessions if you want to see the material twice\n\nSingle-topic skills sessions will be given Thursdays at 12:30pm PT/3:30pm ET and Tuesdays at 11:00am PT/2:00pm ET, with topics switching every two weeks.\nSee the NMFS Open Science Training Page for the training calendar or add the NMFS Open Science calendar to your calendar to see all events.",
    "crumbs": [
      "JupyterHub",
      "Welcome"
    ]
  }
]